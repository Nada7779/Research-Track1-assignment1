from __future__ import print_function

import time
from sr.robot import *

i=0 
j=0
goldencode= list() #list of golden tokens already paired
silvercode= list() #list of silver tokens already paired
silver=True
a_th = 2.0
""" float: Threshold for the control of the linear distance"""

d_th = 0.4
""" float: Threshold for the control of the orientation"""


R = Robot()
""" instance of the class Robot"""

def drive(speed, seconds):
    """
    Function for setting a linear velocity
    
    Args: speed (int): the speed of the wheels
	  seconds (int): the time interval
    """
    R.motors[0].m0.power = speed
    R.motors[0].m1.power = speed
    time.sleep(seconds)
    R.motors[0].m0.power = 0
    R.motors[0].m1.power = 0

def turn(speed, seconds):
    """
    Function for setting an angular velocity
    
    Args: speed (int): the speed of the wheels
	  seconds (int): the time interval
    """
    R.motors[0].m0.power = speed
    R.motors[0].m1.power = -speed
    time.sleep(seconds)
    R.motors[0].m0.power = 0
    R.motors[0].m1.power = 0

def find_silver_token():
    """
    Function to find the closest silver token
    Returns:
	dist (float): distance of the closest silver token (-1 if no silver token is detected)
	rot_y (float): angle between the robot and the silver token (-1 if no silver token is detected)
    """
    dist=100
    for token in R.see():
        if token.dist < dist and token.info.marker_type is MARKER_TOKEN_SILVER:
            dist=token.dist
	    rot_y=token.rot_y
            
    if dist==100:
	return -1, -1
    else:
   	return dist, rot_y

def find_golden_token():
    """
    Function to find the closest golden token
    Returns:
	dist (float): distance of the closest golden token (-1 if no golden token is detected)
	rot_y (float): angle between the robot and the golden token (-1 if no golden token is detected)
    """
    dist=100
    for token in R.see():
        if token.dist < dist and token.info.marker_type is MARKER_TOKEN_GOLD:
            dist=token.dist
	    rot_y=token.rot_y
            
    if dist==100:
	return -1, -1
    else:
   	return dist, rot_y

while 1:
 if silver == True: # if silver is True, then we look for a silver token, otherwise for a golden one
    dist, rot_y = find_silver_token()
    for token in R.see():
               j=token.info.code # we use the j variable to take the silver token code
    if dist==-1: # if no token is detected, we make the robot turn 
	print("I don't see any token!!")
	turn(+10, 1)
	
    elif j in silvercode: # if the token code is in the list of already paired tokens, then we make the robot turn to search for another
        print("already paired")
        turn(+10,1)
    elif dist <d_th: # if we are close to the token, we try grab it.
        print("Found it!")
        for token in R.see(): # append the code of the silver token to the list of silvercode
               silvercode.append(token.info.code) 
        if R.grab():
            print("Gotcha!") 
	    silver = not True # we modify the value of the variable silver, so that it search fo the golden token
	else: 
            print("Aww, I'm not close enough.")
    elif -a_th<= rot_y <= a_th: # if the robot is well aligned with the token, we go forward
	print("Ah, that'll do.")
        drive(10, 0.5)
    elif rot_y < -a_th: # if the robot is not well aligned with the token, we move it on the left or on the right
        print("Left a bit...")
        turn(-2, 0.5)
    elif rot_y > a_th:
        print("Right a bit...")
        turn(+2, 0.5)
 else: # if the silver is set to not true then the robot search for the golden token
   dist, rot_y = find_golden_token()
   for token in R.see():
    i=token.info.offset # we use the i variable to take the silver token offset code
   if dist==-1: # if no token is detected, we make the robot turn 
	print("I don't see any token!!")
	turn(+10, 1)
   elif i in goldencode: # if the token offset code is in the list of already paired tokens, then we make the robot turn to search for another
        print("already paired")
        turn(+10,1)
   elif dist <0.5: # if we are close to the golden token, we realese the silver token.
        print("Arrived")
        R.release()
        silver=True # we modify the value of the variable silver again, so that it search fo the silver token
        for token in R.see(): # append the offset code of the golden token to the list of goldencode
           goldencode.append(token.info.offset)     
   elif -a_th<= rot_y <= a_th: # if the robot is well aligned with the token, we go forward
	print("Ah, that'll do.")
	drive(40,0.5)
	turn(30,0.5) #to move any obstacle from the way
        turn(-30,0.5) # to get back in track
        
   elif rot_y < -a_th: # if the robot is not well aligned with the token, we move it on 
        print("Left a bit...")
        turn(-2, 0.5)
   elif rot_y > a_th:
        print("Right a bit...")
        turn(+2, 0.5)
 
 
 
               
  
        
 
 
 

 